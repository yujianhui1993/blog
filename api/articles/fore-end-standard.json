{"title":"前端命名规范","uid":"09dff03eab2b3667889d9cf16a04a6ed","slug":"fore-end-standard","date":"2022-10-15T10:49:36.000Z","updated":"2023-06-13T00:48:08.082Z","comments":false,"path":"api/articles/fore-end-standard.json","keywords":null,"cover":null,"content":"<h1 id=\"前端命名规范\"><a href=\"#前端命名规范\" class=\"headerlink\" title=\"前端命名规范\"></a>前端命名规范</h1><h2 id=\"引入-Eslint、Prettier-规范\"><a href=\"#引入-Eslint、Prettier-规范\" class=\"headerlink\" title=\"引入 Eslint、Prettier 规范\"></a>引入 Eslint、Prettier 规范</h2><p>一个不好的命名，可能就会引起别人的错误理解；</p>\n<p>遵循一套严格的命名规范，无论是对自己还是接手的他人，都会大大降低代码的维护成本，所以想要成为一名合格的前端开发，命名规范是必须的；</p>\n<h2 id=\"一些常见的不规则命名：\"><a href=\"#一些常见的不规则命名：\" class=\"headerlink\" title=\"一些常见的不规则命名：\"></a>一些常见的不规则命名：</h2><ul>\n<li><p>单词拼写错误：到底是 form 还是 from ？</p>\n</li>\n<li><p>中英文混用：到底用 dzTable 还是 addressList 呢？</p>\n</li>\n<li><p>以 1-9，a-z 命名：不同类型直接用 type1、type2、type3？</p>\n</li>\n<li><p>混用命名格式：一会 addressList 一会 addresslist 一会 addresses，这样不太好吧？</p>\n</li>\n<li><p>单复数不分: 到底 address 还是 addresses 啊？到底是 photoes 还是 photos ？</p>\n</li>\n<li><p>正反义词错用：到底用 showDialog 还是 isDialog 还是 visibleDialog ？</p>\n</li>\n</ul>\n<h2 id=\"一些常见好的命名：\"><a href=\"#一些常见好的命名：\" class=\"headerlink\" title=\"一些常见好的命名：\"></a>一些常见好的命名：</h2><ol>\n<li><p>驼峰式命名法介绍：</p>\n<ul>\n<li><p>Pascal Case 大驼峰式命名法：首字母大写；</p>\n<ul>\n<li>StudentInfo、UserInfo、ProductInfoCamel</li>\n</ul>\n</li>\n<li><p>Case 小驼峰式命名法：首字母小写；</p>\n</li>\n<li><p>studentInfo、userInfo、productInfo</p>\n</li>\n</ul>\n</li>\n<li><p>文件资源命名：</p>\n<ul>\n<li><p>文件名不得含有空格；</p>\n<ul>\n<li>文件名建议只使用小写字母，不使用大写字母；</li>\n</ul>\n</li>\n<li><p>名称较长时采用半角连接符(-)分隔；</p>\n<pre><code>  usr/dev/document/front-end/project-vue3\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>变量命名</p>\n<ul>\n<li><p>命名方式：采用小驼峰式命名方法；</p>\n</li>\n<li><p>命名规范：</p>\n<ul>\n<li><p>普通变量(number, string, date)；</p>\n</li>\n<li><p>布尔类型：需要一个标识变量含义的前缀，比如has, is, wether, can, should等；</p>\n</li>\n<li><p>数组&#x2F;集合等复数形式：最好以s或list等能够标识复数形式的后缀结尾，标识当前变量是复数形式，提高可读性；</p>\n</li>\n</ul>\n</li>\n<li><p>常量全部大写，且用下划线来分割单词，eg：MAX_LENGTH &#x3D; 1</p>\n</li>\n</ul>\n</li>\n<li><p>函数</p>\n<ul>\n<li><p>命名方式 : 小驼峰方式 lowerCamelCase ( 构造函数使用大驼峰命名法 )</p>\n</li>\n<li><p>命名规则 : 前缀为动词，动词 </p>\n<p>eg：add &#x2F; update &#x2F; delete &#x2F; detail &#x2F; get</p>\n<pre><code>// 更新数据\nfunction updateData()&#123;\n  return &#123;&#125;;\n&#125;\n\n// 获取用户信息\nfunction getUserInfo&#123;\n  return &#123;&#125;\n&#125;\n</code></pre>\n</li>\n<li><p>附： 函数方法常用的动词: </p>\n<pre><code>get 获取 set 设置\n\nadd 增加 remove 删除\n\ncreate 创建 destory 销毁\n\nstart 启动 stop 停止\n\nopen 打开 close 关闭\n\nread 读取 write 写入\n\nload 载入 save 保存\n\nbegin 开始 end 结束\n\nbackup 备份 restore 恢复\n\nimport 导入 export 导出\n\nsplit 分割 merge 合并\n\ninject 注入 extract 提取\n\nattach 附着 detach 脱离\n\nbind 绑定 separate 分离\n\nview 查看 browse 浏览\n\nedit 编辑 modify 修改\n\nselect 选取 mark 标记\n\ncopy 复制 paste 粘贴\n\nundo 撤销 redo 重做\n\ninsert 插入 delete 移除\n\nadd 加入 append 添加\n\nclean 清理 clear 清除\n\nindex 索引 sort 排序\n\nfind 查找 search 搜索\n\nincrease 增加 decrease 减少\n\nplay 播放  pause 暂停\n\nlaunch 启动  run 运行\n\ncompile 编译  execute 执行\n\ndebug 调试  trace 跟踪\n\nobserve 观察  listen 监听\n\nbuild 构建  publish 发布\n\ninput 输入  output 输出\n\nencode 编码  decode 解码\n\nencrypt 加密  decrypt 解密\n\ncompress 压缩  decompress 解压缩\n\npack 打包  unpack 解包\n\nparse 解析  emit 生成\n\nconnect 连接  disconnect 断开\n\nsend 发送   receive 接收\n\ndownload 下载  upload 上传\n\nrefresh 刷新  synchronize 同步\n\nupdate 更新  revert 复原\n\nlock 锁定  unlock 解锁\n\ncheck out 签出  check in 签入\n\nsubmit 提交  commit 交付\n\npush 推  pull 拉\n\nexpand 展开  collapse 折叠\n\nenter 进入  exit 退出\n\nabort 放弃  quit 离开\n\nobsolete 废弃  depreciate 废旧\n\ncollect 收集  aggregate 聚集\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚， 不要嫌名字长</p>\n<pre><code> 正例： MAX_STOCK_COUNT\n\n 反例： MAX_COUNT\n</code></pre>\n</li>\n<li><p>css 命名：</p>\n<ul>\n<li><p>样式类名使用小写字母，以半角连接符(-)分割；</p>\n</li>\n<li><p>id 采用驼峰式命名；</p>\n</li>\n<li><p>scss &#x2F; less 中的变量、函数、混合、placeholder 采用驼峰式命名</p>\n</li>\n</ul>\n</li>\n</ol>\n","text":"前端命名规范引入 Eslint、Prettier 规范一个不好的命名，可能就会引起别人的错误理解； 遵循一套严格的命名规范，无论是对自己还是接手的他人，都会大大降低代码的维护成本，所以想要成为一名合格的前端开发，命名规范是必须的； 一些常见的不规则命名： 单词拼写错误：到底是 f...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"规范","slug":"规范","count":4,"path":"api/categories/规范.json"}],"tags":[{"name":"命名规范","slug":"命名规范","count":1,"path":"api/tags/命名规范.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%AB%AF%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">前端命名规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5-Eslint%E3%80%81Prettier-%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">引入 Eslint、Prettier 规范</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%8D%E8%A7%84%E5%88%99%E5%91%BD%E5%90%8D%EF%BC%9A\"><span class=\"toc-text\">一些常见的不规则命名：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E5%A5%BD%E7%9A%84%E5%91%BD%E5%90%8D%EF%BC%9A\"><span class=\"toc-text\">一些常见好的命名：</span></a></li></ol></li></ol>","author":{"name":"虞建辉","slug":"虞建辉","avatar":"https://avatars.githubusercontent.com/u/7228360?s=400&u=5b2242e59ba02c0e1e7bc43eb68b070e26ec6a6e&v=4","link":"/","description":"好的程序员从来不只写代码，他们还致力于优雅地解决问题","socials":{"github":"https://github.com/yujianhui1993?tab=repositories","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Git操作规范","uid":"4d9513f4ca1217585e9de135aa4bfa69","slug":"git-standard","date":"2022-10-15T10:49:36.000Z","updated":"2023-06-13T00:48:08.082Z","comments":false,"path":"api/articles/git-standard.json","keywords":null,"cover":null,"text":"Git规范写好git commit提交有什么好处呢？ 查看提交的log也非常的优雅，这个就不多提了 方便查找日志记录，通过简单的过滤便能定位到具体想要查找的log 方便问题回溯，通过git log就能查找到当时提交的代码文件，以及修改的代码 其实如果使用过github的relea...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"规范","slug":"规范","count":4,"path":"api/categories/规范.json"}],"tags":[{"name":"Git 规范","slug":"Git-规范","count":1,"path":"api/tags/Git-规范.json"}],"author":{"name":"虞建辉","slug":"虞建辉","avatar":"https://avatars.githubusercontent.com/u/7228360?s=400&u=5b2242e59ba02c0e1e7bc43eb68b070e26ec6a6e&v=4","link":"/","description":"好的程序员从来不只写代码，他们还致力于优雅地解决问题","socials":{"github":"https://github.com/yujianhui1993?tab=repositories","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}